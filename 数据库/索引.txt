关系型数据库考点：
架构；索引；锁；语法；理论范式

如何设计一个关系型数据库，架构：
程序实例：存储管理；缓存机制；sql解析；日志管理；权限划分；容灾机制；索引管理；锁管理；
存储文件系统：

索引模块：
1 为什么要使用索引？
查询最原始的方式是全表扫描，即将全表的数据一次或分批次加载到内存当中，逐个快进行轮询，直到要查找到数据为止，数据量少的情况下适用。
增加查询的速率，源自于字典，根据数据的某些特征进行查找。
2 什么样的信息能成为索引？
主键，唯一键，普通键等。
3 索引的数据结构？

二分查找树；最多只有两个子节点，然后左子树均比根小，右子树均比根大
AVL树；左右子树的高度不超过1；
红黑树；
B树；平衡多路查找树，有多少个孩子就是n阶树，影响数据库性能的是io发生的次数，将树变矮一些，树节点的数据存储的多一些，
根节点至少有两个孩子；树中每个节点最多含有m个孩子（m>=2）；
除了根节点和叶子节点外，每个节点至多有ceil（m/2）个孩子；
所有叶子节点都位于同一层；
最后一条约束，关键字是升序排列，也就是每个子节点中包含有关键字信息，那么关键字的信息排列之间是顺序，（8，10）-》（P1，P2，P3），8和10是关键字信息，也就是要比对的数据，按升序排列，
关键字的个数要满足：ceil（m/2）-1 <= n <= m-1，如果是3阶树，那么关键字就有两个或一个，p1<8，8<p2<10,P3>10

B+树:
基本与B树相同，除了非叶子节点的指针与关键数个数相同，
非叶子节点仅用来做索引，数据都保存在叶子节点中，可能保存有指向数据文件的指针，可能存储的是主键的值，可能直接存储数据本身，
所有叶子节点均有一个链指针指向下一个叶子节点，支持范围统计

B+树更适合做数据库的索引：
B+树磁盘读写代价更低，因为非叶子节点只保存索引信息，一次性能加载进内存的数据就更多，降低了io读写的频率；
B+树的查询效率更加稳定，任何查找都必须走一条根节点到叶子节点的路，每个数据的查询长度都相同，导致查询性能都是一样的；
B+树更有利于对数据库的扫描，有利于做范围查询，

Hash索引：
查询效率高，只须经过一次hash运算便能知道数据存储的链表，然后顺着指针移动获得数据，
缺点：只能使用=或in不能使用范围索引，无法被用来避免数据的排序操作，不能利用部分索引键来做查询，不能避免表扫描，
遇到大量hash值相同的情况后，退化成链表，不一定比B树的查询性能好

BitMap位图索引：oracle
已知只有少量数据值种类固定的情况，类似于性别，颜色等已知固定的数据。
增加删除时锁的粒度比较大，不适合于高并发的处理系统



4 密集索引和稀疏索引的区别？

在mysql中的data目录，数据库下面存储着数据文件和索引文件的信息，innodb中索引和数据文件都是同一个，而myisam的索引文件和数据文件是各自一个；

密集索引每个文件中的搜索码值都对应一个索引值，密集索引里面的关键字除了索引信息也包含所有的数据信息，行数据存储在叶子节点上，
稀疏索引文件只为索引码的某些值建立索引项，稀疏索引里面的关键字除了存储索引的信息只包含数据文件指针或者是主键的信息，所以稀疏索引可能要两次查询，表数据存储在不同的地方，跟索引分开存储；

innodb有且仅有一个密集索引，
若一个主键被定义，则该主键就作为密集索引；
如果没有主键被定义，该表的第一个唯一非空索引则作为密集索引；
若不满足以上条件，innodb内部会生成一个隐藏主键作为密集索引；
非主键索引存储相关键位和其对应的主键值，包含两次查找，非主键索引包含两次查找；

myisam所有的索引都是稀疏索引，

5 sql优化？
1 如何定位并优化慢查询语句
show variables like '%query%';
show status like '%slow_queries%';
set global show_query_log = on;
set global long_query_time = 1;
根据慢日志定位慢查询sql

使用explain等工具分析慢sql
type:index->all需要优化，走全表扫描，
extra：using filesort（外部索引排序，可能是磁盘或者内存）；using temporary（对查询结果排序时使用临时表）；using index 使用了索引

修改sql或者尽量让sql走索引

2 联合索引的最左匹配原则的成因
最左前缀匹配原则，mysql会一直向右匹配直到遇到范围查询（<,>,between,like）就停止匹配，
=和in可以乱序，mysql的查询优化器会帮你优化成索引可以识别的形式

3 索引是建立的越多越好
数据量小的表不需要建立索引，建立会增加额外的索引开销；
数据变更需要维护索引，因此更多的索引意味着更多的维护成本；
更多的索引也就是意味着更多的空间；